package(default_visibility = ["//visibility:public"])

cc_library(
    name = "nutclient",
    srcs = [
        "clients/nutclient.cpp",
        "include/nut_stdint.h",
        ":empty_config_file",
    ],
    hdrs = [
        "clients/nutclient.h",
    ],
    copts = [
        "-Iexternal/com_github_networkupstools_nut/include",
    ],
    strip_include_prefix = "clients",
)

genrule(
    name = "version_header",
    outs = ["include/nut_version.h"],
    cmd = "echo > $@",
)

# We'll use bazel rules to set up defines, so an empty file is fine.
genrule(
    name = "empty_config_file",
    outs = ["config.h"],
    cmd = "echo > $@",
)

cc_library(
    name = "common",
    srcs = [
        "common/common.c",
        "common/parseconf.c",
        "common/state.c",
        "common/str.c",
        "common/upsconf.c",
        ":empty_config_file",
    ],
    hdrs = [
        "include/attribute.h",
        "include/common.h",
        "include/extstate.h",
        "include/nut_float.h",
        "include/nut_platform.h",
        "include/nut_stdint.h",
        "include/parseconf.h",
        "include/proto.h",
        "include/state.h",
        "include/str.h",
        "include/timehead.h",
        "include/upsconf.h",
        ":version_header",
    ],
    defines = [
        "HAVE_CFSETISPEED=1",
        "HAVE_DECL_ROUND=1",
        "HAVE_FLOAT_H=1",
        "HAVE_GMTIME_R=1",
        "HAVE_INTTYPES_H=1",
        "HAVE_LIMITS_H=1",
        "HAVE_LOCALTIME_R=1",
        "HAVE_MATH_H=1",
        "HAVE_POLL_H=1",
        "HAVE_SETENV=1",
        "HAVE_SETEUID=1",
        "HAVE_SIGNAL_H=1",
        "HAVE_STDARG_H=1",
        "HAVE_STDINT_H=1",
        "HAVE_STRING_H=1",
        "HAVE_USB=1",
        "HAVE_USLEEP=1",
        "TIME_WITH_SYS_TIME=1",
        "WITH_LIBUSB_1_0=1",
    ],
    includes = ["empty_config"],
    local_defines = [
        "CONFIG_FLAGS=\\\"\\\"",
        "CC_VERSION=\\\"\\\"",
        "PACKAGE_VERSION=\\\"\\\"",
        "NUT_VERSION_MACRO=\"\\\"?\\\"\"",
        "LIBDIR=\\\"/usr/local/ups/lib\\\"",
        "LOG_FACILITY=LOG_DAEMON",
        "PIDPATH=\\\"/var/run\\\"",
        "CONFPATH=\\\"/usr/local/ups/etc\\\"",
        "STATEPATH=\\\"/var/state/ups\\\"",
    ],
    strip_include_prefix = "include",
)

cc_binary(
    name = "upsd",
    srcs = [
        "server/conf.c",
        "server/conf.h",
        "server/desc.c",
        "server/desc.h",
        "server/netcmds.h",
        "server/neterr.h",
        "server/netget.c",
        "server/netget.h",
        "server/netinstcmd.c",
        "server/netinstcmd.h",
        "server/netlist.c",
        "server/netlist.h",
        "server/netmisc.c",
        "server/netmisc.h",
        "server/netset.c",
        "server/netset.h",
        "server/netssl.c",
        "server/netssl.h",
        "server/netuser.c",
        "server/netuser.h",
        "server/nut_ctype.h",
        "server/sstate.c",
        "server/sstate.h",
        "server/stype.h",
        "server/upsd.c",
        "server/upsd.h",
        "server/upstype.h",
        "server/user.c",
        "server/user.h",
        "server/user-data.h",
    ],
    defines = [
        "NUT_NETVERSION=\\\"1.3\\\"",
    ],
    local_defines = [
        "RUN_AS_USER=\\\"nobody\\\"",
        "RUN_AS_GROUP=\\\"nobody\\\"",
        "NUT_DATADIR=\\\"/usr/local/ups/share\\\"",
    ],
    deps = [":common"],
)

cc_binary(
    name = "usbhid-ups",
    srcs = [
        "drivers/apc-hid.c",
        "drivers/apc-hid.h",
        "drivers/arduino-hid.c",
        "drivers/arduino-hid.h",
        "drivers/belkin-hid.c",
        "drivers/belkin-hid.h",
        "drivers/cps-hid.c",
        "drivers/cps-hid.h",
        "drivers/delta_ups-hid.c",
        "drivers/delta_ups-hid.h",
        "drivers/dstate.c",
        "drivers/dstate.h",
        "drivers/ever-hid.c",
        "drivers/ever-hid.h",
        "drivers/explore-hid.c",
        "drivers/explore-hid.h",
        "drivers/hidparser.c",
        "drivers/hidparser.h",
        "drivers/hidtypes.h",
        "drivers/idowell-hid.c",
        "drivers/idowell-hid.h",
        "drivers/legrand-hid.c",
        "drivers/legrand-hid.h",
        "drivers/libhid.c",
        "drivers/libhid.h",
        "drivers/libusb1.c",
        "drivers/liebert-hid.c",
        "drivers/liebert-hid.h",
        "drivers/main.c",
        "drivers/main.h",
        "drivers/mge-hid.c",
        "drivers/mge-hid.h",
        "drivers/nut_libusb.h",
        "drivers/openups-hid.c",
        "drivers/openups-hid.h",
        "drivers/powercom-hid.c",
        "drivers/powercom-hid.h",
        "drivers/powervar-hid.c",
        "drivers/powervar-hid.h",
        "drivers/salicru-hid.c",
        "drivers/salicru-hid.h",
        "drivers/tripplite-hid.c",
        "drivers/tripplite-hid.h",
        "drivers/upsdrvquery.c",
        "drivers/upsdrvquery.h",
        "drivers/upshandler.h",
        "drivers/usb-common.c",
        "drivers/usb-common.h",
        "drivers/usbhid-ups.c",
        "drivers/usbhid-ups.h",
    ],
    local_defines = [
        "RUN_AS_USER=\\\"nobody\\\"",
        "RUN_AS_GROUP=\\\"nobody\\\"",
        "DRVPATH=\\\"/usr/local/bin\\\"",
    ],
    deps = [
        ":common",
        "@com_github_libusb_libusb//:libusb",
    ],
)
